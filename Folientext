1: Setup

2: Titel und Name
Kann ich anfangen? Ja. Ok.
Mein Name ist Michael Hochleitner und mein Thema ist HTTP und HTTP/2. Wenn ihr während des Vortrags Fragen habt, könnt ihr mich gerne unterbrechen. 

3: Was ist HTTP?
HTTP steht für Hypertext Transfer Protokoll. Es ist ein Protokoll für Rechnernetze. In Rechnernetzen wollen wir zwischen Rechnern, die ins Netz eingebunden sind Datenpakete austauschen. Es können z.B. Client und Server durch das Netz verbunden sein. Was HTTP dabei für uns macht ist spezifizieren wie die Datenpakete aussehen sollen. 

4: Hier sind zwei Beispiele für Datenpakete. Das Protokoll an das sie sich halten, ist der erste Prototyp von HTTP. Man nennt den Prototyp HTTP/0.9 . Eine Anfrage, die ein Client an einen Server stellen könnte und die Antwort des Servers. Was man hier schön sehen kann: HTTP ist ein Textprotokoll. Das bedeutet wir haben hier keine Bits, sondern ASCII-Zeichen und es ist vom Menschen lesbar. Und es ist ein Request-Response-Protocol. Das bedeutet die Kommunikation geht in zwei Richtungen: Vom Client zum Server und zurück. Das ist nicht bei allen Protokollen so. Beim UDP-Protokoll (User Datagram Protocol) geht die Kommunikation nur in eine Richtung. In der Anfrage gibt es die Methode GET. Das ist auch die einzig mögliche Methode in HTTP/0.9. Get bedeutet, dass sich der Client eine Datei vom Server holen will. Als Argument hat die GET-Methode die Ressource, die der Client haben will. Das ist in diesem Fall eine HTML-Datei. Man kann hier direkt auf die Ordnerstruktur des Servers zugreifen, weil die IP und der Port schon durch die TCP-Verbindung auf der HTTP aufbaut bekannt ist. Z.B. eine telnet Verbindung, die TCP benutzt.
Beispiele erfüllen die Spezifikationen eines Prototyps für das HTTP-Protokoll von 1991. Man kann das Protokoll immer noch benutzen. Beispiel zeigen.

5: Grenzen von HTTP/0.9
Um die grundlegenden Funktionalitäten zu testen war der Prototyp schon nicht schlecht, aber im Lauf der Zeit wollte man mehr machen und HTTP/0.9 ist an seine Grenzen gestoßen. Und das waren folgende.
Nach einer Anfrage kann im besten Fall eine Datei übertragen werden. Es muss also für jede angefragte Datei eine neue Verbindung aufgebaut werden. Bei vielen Dateien muss die Verbindung also immer wieder aufgebaut werden. Das kostet Zeit. 
Man konnte nur eine Art von Dateien übertragen: HTML. Im Fall, dass die angefragte Datei nicht vorhanden ist, wurde eine spezielle HTML-Seite gesendet. Die Fehlerbehandlung sah so aus, dass wenn eine angefragte Datei nicht existierte eine spezielle HTML-Datei zurückgesendet wird, in der eine Fehlermeldung steht. Das Problem dabei ist, dass die Datei zwar Menschen lesbar ist, aber man solche Fehlermeldungen eigentlich maschinell verarbeiten will. 

6: HTTP/1.1
Nach ein paar Jahren gab es dann die erste standardisierte Version von HTTP. Die heißt HTTP/1.1. HTTP/1.1 hat viele Neuerungen gegenüber HTTP/0.9. Unter anderem wurden die Probleme gelöst, die HTTP/0.9 hatte. Es gibt jetzt Metadaten, die es möglich machen verschiedene Dateitypen zu versenden. Es gibt Status Codes, die der Server versenden kann, wenn Probleme auftreten und man kann Verbindungen für mehrere Anfragen wiederverwenden. Und es gibt Pipelining. Pipelining bedeutet, dass in einer Verbindung ein neuer Request geschickt werden kann, bevor der vorherige Request bearbeitet ist. Die beiden unteren Stichpunkte verbessern die Performance. Das wiederholt sich bei jeder Veränderung des HTTP-Protokolls. Performance ist also ein wichtiges Thema.

7: Metainformationen: Header
Es gibt 4 Arten von Headern. Wie gesagt sind Header Metadaten. Der Unterschied zwischen den Klassen ist worüber der Header Informationen gibt und wo man ihn verwenden kann. Allgemeine Header können in Anfragen und Antworten benutzt werden. Sie beziehen sich nur auf die Nachricht. Ein Beispiel dafür ist der Date Header, der angibt an welchem Datum und zu welcher Zeit eine Nachricht losgeschickt wurde.
Anfrage Headerfelder liefern Informationen über den Client und die Anfrage. So ein Headerfeld ist das Accept-Headerfeld. Das Accept-Headerfeld gibt an in welchem Dateiformat die angefragte Ressource vom Client akzeptiert wird. Z.B. kann der Client sagen, dass er gerne eine JSON-Datei haben möchte.
Antwort Header liefern Informationen über den Server und darüber wie man auf die angefragte Ressource zugreifen kann. So wie in der Beispielanfrage an Google. Dort ist der Location-Headerfeld ein Antwort Headerfeld. Das Location-Headerfeld gibt an wo sich eine angefragte Ressource befindet. Das ist nötig, wenn man mit einem Request eine Ressource erstellt oder wenn sich die angefragte Ressource an einem anderen Ort ist.
Entity Headerfelder beziehen sich auf den Payload/Entity/Message-Body.
Ein Beispiel für ein Entity Headerfeld ist Content-type. Content-type gibt an welches Dateiformat die Datei, die der Server schickt hat. Der Wert von Content-type kann z.B. Aussagen, dass die geschickte Datei eine HTMl-Datei ist und ihr Zeichensatz UTF-8 ist.

8 Methoden
Dann gibt es in HTTP/1.1 mehr Methoden. Im Prototyp hatten wir nur die Methode GET um Dateien zu holen. HEAD ist dasselbe wie GET ohne den message-body. Das kann man benutzen um sich Metainformationen über eine entity zu holen.
Mit POST kann man eine entity an den Server schicken, die der Server dann weiterverarbeiten kann. Z.B. einen Beitrag in einem Forum schreiben.
Mit PUT kann man neue Ressourcen auf dem Server erstellen. Der Unterschied zwischen POST und PUT ist die Bedeutung der URL, die man in beiden Methoden braucht. Bei POST gibt die URL eine Ressource an, die die entity weiterverarbeitet. Bei PUT ist die URL eine neue oder bestehende URL für die entity selbst.
Mit DELETE kann man Dateien auf dem Server löschen. Ob das wirklich passiert, entscheidet der Server. Beispiel: DELETE google.com/about
TRACE liefert die Anfrage so zurück wie der Server sie empfangen hat. So kann man überprüfen, ob der Request auf dem Weg zum Server verändert wurde. Denn es können zwischen Client und Server Tunnel, Proxies und Gateways sitzen. Das war eine Auswahl von Methoden. Es gibt noch mehr.

9 Probleme mit HTTP/1.1
Wie wir gesehen hab gab es in HTTP/1.1 neue Möglichkeiten aber die Datenmenge die man übertragen möchte ist wieder größer geworden und man wollte die Latenz noch mehr verringern. Dafür möchte man die Netzwerk-Ressourcen, die man zur Verfügung hat optimal Nutzen. Netzwerk-Ressourcen heißt konkret die TCP-Verbindungen. Im besten Fall möchte man alle Request Nebenläufig verarbeiten lassen. Das geht aber nicht, weil die Anzahl der TCP-Verbindungen, die man aufbauen kann begrenzt ist. Ein Lösungsansatz, der die Latenz verbessert hat ist Pipelining. Aber Pipelining hat auch Grenzen. Und ein Problem, dass bei Pipelining auftritt ist Head of Line Blocking. Das führt dazu, dass viele TCP-Verbindungen aufgebaut werden, um die Latenz gering zu halten. Das will man bei HTTP/2 vermeiden. Konkretes Ziel für HTTP/2 ist weniger TCP Verbindungen für die selben Daten zu benutzen.

10 Pipelining
Bevor ich Head of Line Blocking erkläre, will ich nochmal Pipelining genauer anschauen. Was Pipelining möglich gemacht hat, ist dass bevor die Antwort auf einen Request da ist, man einen neuen Request losschicken kann. Was aber nichts daran ändert, dass ich auf die Antwort des ersten Request warten muss, bevor ich die Antwort auf den zweiten Request empfangen kann. Es gilt also First-In-First-Out.

11 Head of Line Blocking
Was mann Head of Line Blocking nennt, ist dass der Request, der als erster in der Pipeline ist, alle Requests dahinter blockiert. Da gibt es eine Analogie. Nämlich Warteschlangen z.B. im Supermarkt. Man möchte möglichst schnell drankommen und sucht sich die Schlange aus, von der man denkt, dass man am schnellsten ist. Das ist aber nur eine Schätzung. Bei TCP-Verbindungen kann man im Vergleich zu Supermarktschlangen selber entscheiden eine neue Schlange aufzumachen. Aber dabei ist die Skalierung durch die Anzahl der TCP-Verbindungen, die man öffnen kann begrenzt.  


Head of line blocking -> viele TCP-Verbindung werden benutzt
Ziel: Weniger TCP-Verbindungen benutzen. Die verfügbaren Netzwerkressourcen effizient ausnutzen.
Header sind redundant und zu ausführlich -> unnötige Daten und füllen des TCP congestion windows

10 HTTP/2
2015 gab es eine neue Protokollversion, nämlich HTTP/2. Und wieder war ein Hauptaugenmerk der Entwickler die Performanczu steigern.

Lösungen:
1. "HTTP/2 addresses these issues by defining an optimized mapping of HTTP's semantics to an underlying connection." Das geht mit interleaving und streams.
2.1 "efficient coding for HTTP header fields"

 

11 Datenkompression

12 Multiplexing

13 Server Push

14 Binäre Kodierung von Inhalten

15 Zusammenfassung

TODO: Probleme bei HTTP/1.1 beschreiben: https://http2.github.io/http2-spec/ Introductiond


Folien ausfüllen, Texte schreiben, Seitenzahlen hinzufügen, Üben, üben, üben


	

 




