Folie 1: Titel und Name
Kann ich anfangen? Ja. Ok.
Mein Name ist Michael Hochleitner und mein Thema ist HTTP und HTTP/2. Wenn ihr während des Vortrags Fragen habt, könnt ihr mich gerne unterbrechen. 

Folie 2: Was ist HTTP?
HTTP steht für Hypertext Transfer Protokoll. Es ist ein Protokoll für Rechnernetze. In Rechnernetzen wollen wir zwischen Rechnern, die ins Netz eingebunden sind Datenpakete austauschen. Es können z.B. Client und Server durch das Netz verbunden sein. Was HTTP dabei für uns macht ist spezifizieren wie die Datenpakete aussehen sollen. 

Folie 3: Hier sind zwei Beispiele für Datenpakete. Eine Anfrage, die ein Client an einen Server stellen könnte und die Antwort des Servers. Was man hier schön sehen kann: HTTP ist ein Textprotokoll. Das bedeutet wir haben hier keine Bits, sondern ASCII-Zeichen und es ist vom Menschen lesbar. Und es ist ein Request-Response-Protocol. Das bedeutet die Kommunikation geht in zwei Richtungen: Vom Client zum Server und zurück. Das ist nicht bei allen Protokollen so. Beim UDP-Protokoll geht die Kommunikation nur in eine Richtung.
Beispiele erfüllen die Spezifikationen eines Prototyps für das HTTP-Protokoll von 1991. Man kann das Protokoll immer noch benutzen. -> Beispiel vorführen.

Folie 4: Anforderungen an den Prototyp
    Client-server, request-response protocol.
    ASCII protocol, running over a TCP/IP link.
    Designed to transfer hypertext documents (HTML).
    $$The connection between server and client is closed after every request.$$ -> Wichtig für die folgenden Themen.
	Einschränkungen: Für jede Datei, die übertragen wird, muss eine neue Verbindung aufgebaut werden.

Neue Anforderungen:
connection reuse
we needed a protocol that could
serve more than just hypertext documents
provide richer metadata about the request and the response
enable content negotiation


Folie 5: HTTP/1.1



Folie 3: Was machen Protokolle?
Protokolle definieren Regeln zur Kommunikation. Kommunikation bedeutet hier, dass Dateneinheiten von einem Rechner zum anderen geschickt werden. Ein Beispiel für ein Protokoll bei der Kommunikation zwischen Menschen ist "Roger" und "Over" aus dem Funksprechverkehr. Hier bedeutet Roger, dass man die letzte Nachricht verstanden hat und "Over" steht dafür, dass man die Sprechrichtung wechselt.
Bei Netzwerkprotokollen braucht man z.B. Regeln, die Aussagen über das Format der Dateneinheiten machen, die ausgetauscht werden, Regeln zur Codierung und Decodierung und Regeln die Beschreiben, wie man mit Übertragungsfehlern umgeht. 
  

Folie 3: Anforderungen an HTTP im Laufe der Zeit 
Die Verwendung von Rechnernetzen hat sich über die Zeit gewandelt. Z.B. sind die Dienste, die heute auf dem Internet aufbauen vielfältiger als 1990. Das heißt heute werden nicht nur mehr HTML-Dateien verschickt, sondern auch Bilder und Videos.

1990 wurde die erste Version von http implementiert. Die Anforderung war simpel: Übertragung einer html-Datei. Das Protokoll Bestand aus einer Anfrage und einer Antwort. Es ist also ein Request-Response Protokoll. Man nennt HTTP/0.9 auch One-Line-Protocol, weil die Anfrage nur aus dem Keyword GET und dem Pfad zur angeforderten Ressource bestand. Die Antwort war die angeforderte HTML-Datei. Wenn einer Fehler auftrat, wurde eine spezielle HTML-Datei zurückgesendet, in der Stand, das ein Fehler aufgetreten ist.
Was hier nicht implementiert wurde ist: Format der Dateneinheiten. Es gab nur ein Format. Kodierung und Dekodierung gab es nicht. Umgang mit Übertragungsfehlern war da.


1996 RFC 1945
Zwischen 1990 und 1996 Entwicklung wurde mit einem Try-And-See-Approach entwickelt. Leute, die HTTP implementiert haben haben auf ihren Servern und Browsern HTTP erweitert wie sie wollten und ausprobiert, ob die Erweiterungen benutzt werden. 1996 kam mit RFC1945 eine Definition von HTTP/1.0. Jetzt wurde die Protokollversion mit übertragen, die Response hatte einen Status-Code, die enthielt, ob eine Anfrag erfolgreich oder nicht erfolgreich war. Metadaten über die Datenpakete.


Folie 4: Anforderungen an HTTP im Laufe der Zeit
Bei HTTP 1.1 waren die Anforderungen die Geschwindigkeit zu erhöhen, die benötigt wird, um eine Internetseite darzustellen.
Die Repräsentation des Inhalts sollte an verschiedene Clients angepasst werden können. Und virtuelle Hosts sollten unterstützt werden.

Bei HTTP/2 liegt der Fokus vor allem auf Geschwindigkeit.









